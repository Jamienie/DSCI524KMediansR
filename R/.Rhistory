head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
p +
geom_line(aes(x=Fare,y=predict),data = loe_plot)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
head(loe_plot)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.65))
summary(loe)
augument(loe)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.65))
summary(loe)
augument(loe)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.65))
summary(loe)
augment(loe)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.65))
summary(loe)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
p +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
loe_aug
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
p +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
loe_aug
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
p +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex)
poisson_aug <- augment(poissonModel)
poissonModel <- glm(R ~ H * BB, family=poisson(link=log), data=my_teams)
poissonModel <- glm(R ~ H * BB, family=poisson(link=log), data=my_teams)
library(Lahman)
head(Teams)
my_teams <- Teams %>%
select(teamID,R, BB, H)
head(my_teams)
q <- ggplot(my_teams,aes(H,R,color=BB))+
geom_jitter(alpha=0.55,size=1.5)+
labs(x="Number of Hits",
y = "Number of Runs",
color="Number of Walks")+
scale_color_gradient(low="green", high="black")+
ggtitle("Runs vs Hits and Walks")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plot(q)
poissonModel <- glm(R ~ H * BB, family=poisson(link=log), data=my_teams)
summary(poissonModel)
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
#residuals <- residuals(poissonModel)
#predicted <- predict(poissonModel,type = "response")
#head(predicted)
#head(residuals)
#resid <- my_teams$R - predicted
#head(resid)
#head(my_teams)
#plot(predicted,residuals,pch=21,bg="green",col="green")
#abline(0,0)
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid, color = "green")) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point(aes(color="green")) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point(aes(color=green)) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid),color="blue") +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green") +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
loe_aug
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
titanic_plot +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
loe_aug
head(my_titanic_loe)
titanic_plot <- expand.grid(Sex=c(1,2),
Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
head(titanic_plot)
loe_plot <-
titanic_plot %>%
mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex)
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
#loe_aug
#head(my_titanic_loe)
#titanic_plot <- expand.grid(Sex=c(1,2),
#                      Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
#head(titanic_plot)
#loe_plot <-
# titanic_plot %>%
# mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex)#
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.1, degree=1))
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.15))
summary(loe)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.15), degree = 1)
summary(loe)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
#loe_aug
#head(my_titanic_loe)
#titanic_plot <- expand.grid(Sex=c(1,2),
#                      Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
#head(titanic_plot)
#loe_plot <-
# titanic_plot %>%
# mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex)#
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex)
#p + geom_line(aes(Fare,predict(loe))
#p + geom_smooth(method = "loess", color="black", se = FALSE)
loe_aug <- augment(loe)
#loe_aug
#head(my_titanic_loe)
#titanic_plot <- expand.grid(Sex=c(1,2),
#                      Fare=seq(min(my_titanic_loe$Fare),max(my_titanic_loe$Fare)))
#head(titanic_plot)
#loe_plot <-
# titanic_plot %>%
# mutate(predict= predict(loe, newdata = titanic_plot, type="response"))
sex_names <- list(
'1'="Female",
'2'="Male")
sex_labeller <- function(variable,value){
return(sex_names[value])
}
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex, labeller=sex_labeller)#
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug) +
facet_wrap(~Sex, labeller=sex_labeller)
loe_aug <- augment(loe)
sex_names <- list(
'1'="Female",
'2'="Male")
sex_labeller <- function(variable,value){
return(sex_names[value])
}
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex, labeller=sex_labeller)#
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug)
loe_aug <- augment(loe)
sex_names <- list(
'1'="Female",
'2'="Male")
sex_labeller <- function(variable,value){
return(sex_names[value])
}
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex, labeller=sex_labeller) +
theme(legend.position='none')
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug)
library(broom)
my_titanic_loe <- my_titanic
my_titanic_loe$Sex <- as.numeric(my_titanic_loe$Sex)
loe <- loess(Survived ~ Fare+Sex, data=my_titanic_loe,method.args = (span=0.15), degree = 2)
summary(loe)
loe_aug <- augment(loe)
sex_names <- list(
'1'="Female",
'2'="Male")
sex_labeller <- function(variable,value){
return(sex_names[value])
}
q<- ggplot(my_titanic_loe, aes(Fare,Survived, color=Sex)) +
geom_jitter()+
facet_wrap(~Sex, labeller=sex_labeller) +
theme(legend.position='none')
q +
geom_line(aes(x=Fare,y=.fitted),data = loe_aug)
new_data$Sex <- as.numeric(new_data$Sex)
predict(loe,new_data,type="response")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green", size=5) +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green", size=3) +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green", size=2) +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green", size=1) +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
poisson_aug <- augment(poissonModel)
ggplot(poisson_aug, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "green", size=1.5) +
theme_bw() +
labs(x = "Fitted Values",
y = "Residuals")
library(devtools)
find_rtools()
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(broom))
suppressPackageStartupMessages(library(quantreg))  # For quantile regression
suppressPackageStartupMessages(library(testthat))
setwd("~/block5/DSCI_524_project/DSCI524KMediansR/R")
distance <- function(X, medians){
# Calculates the Manhanttan distance between the medians and every point in the dataset
#
# Parameters
# ----------
# x: matrix
# The dataset being clustered
#
# medians: matrix
# Medians of the clusters
#
# Returns
# -------
# dist: matrix
# Distance between each point and each median
K <- nrow(medians)
n <- nrow(X)
dist <- matrix(nrow=n,ncol=K)
for (k in 1:K) {
for (i in 1:n){
dist[i,k] <- abs(X[i,1]-medians[k,1])+abs(X[i,2]-medians[k,2])
}
}
return (dist)
}
source("distance.R")
kmedians <- function(X, num_clusters, n_it=100){
# Groups the points in your dataset ,X, into the desired number of clusters, based on the median distance between the points.
# This function uses random intilization to assign the first medians and then will update the medians and
# the group assignments until the assignment does not change.
#
# Parameters
# ----------
# X: matrix
# The dataset being clustered
#
# num_clusters: integer
# The desired number of clusters
#
# Returns
# -------
# List contains both medians and labels :
#
#   medians: matrix
#   The coordinates of the medians for each cluster
#
#   labels: list
#   List that has the assignment of the cluster for each point in the dataset
n <- nrow(X)
u <- matrix(0, nrow = num_clusters, ncol = n)
# initialize median points
medians <- X[sample(n,size=num_clusters,replace=FALSE),]
for (i in 1:n_it){
d <- distance(X, medians)
labels <- apply(d, 1, which.min)
for (j in 1:n){
u[labels[j], j] <- 1
}
for (k in 1:num_clusters){
medians[k,] = apply((matrix(X[u[k,]==1],ncol=2)), 2, median)
}
}
return(list(medians,labels))
}
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
kmedians(A,2)
crime <- read.dta("https://stats.idre.ucla.edu/stat/data/crime.dta")
suppressPackageStartupMessages(library(foreign))
library(tidyverse)
crime <- read.dta("https://stats.idre.ucla.edu/stat/data/crime.dta")
crime <- crime %>% select(crime,murder)
crime
kmedians(crime,2)
A <- as.matrix(A)
crime <- as.matrix(crime)
kmedians(crime,2)
setwd("~/block5/DSCI_524_project/DSCI524KMediansR/R")
source("distance.R")
kmedians <- function(X, num_clusters, n_it=100){
# Groups the points in your dataset ,X, into the desired number of clusters, based on the median distance between the points.
# This function uses random intilization to assign the first medians and then will update the medians and
# the group assignments until the assignment does not change.
#
# Parameters
# ----------
# X: matrix
# The dataset being clustered
#
# num_clusters: integer
# The desired number of clusters
#
# n_it: integer
# The number of loops. Default value is 100.
#
# Returns
# -------
# List contains both medians and labels :
#
#   medians: matrix
#   The coordinates of the medians for each cluster
#
#   labels: list
#   List that has the assignment of the cluster for each point in the dataset
n <- nrow(X)
u <- matrix(0, nrow = num_clusters, ncol = n)
# initialize median points
medians <- X[sample(n,size=num_clusters,replace=FALSE),]
for (i in 1:n_it){
d <- distance(X, medians)
labels <- apply(d, 1, which.min)
for (j in 1:n){
u[labels[j], j] <- 1
}
for (k in 1:num_clusters){
medians[k,] = apply((matrix(X[u[k,]==1],ncol=2)), 2, median)
}
}
# make the output as a list
return(list(medians,labels))
}
crmie
crime
crime[1,1]
crime.shape
nrow(crime)
ncol(crime)
kmedians(crime,2)
plot(crime)
m <-matrix(c(1,1,2,2),nrow = 2,ncol = 2,byrow=TRUE)
distance <- function(X, medians){
# Calculates the Manhanttan distance between the medians and every point in the dataset
#
# Parameters
# ----------
# x: matrix
# The dataset being clustered
#
# medians: matrix
# Medians of the clusters
#
# Returns
# -------
# dist: matrix
# Distance between each point and each median
K <- nrow(medians)
n <- nrow(X)
dist <- matrix(nrow=n,ncol=K)
for (k in 1:K) {
for (i in 1:n){
dist[i,k] <- abs(X[i,1]-medians[k,1])+abs(X[i,2]-medians[k,2])
}
}
return (dist)
}
distance(crime,m)
