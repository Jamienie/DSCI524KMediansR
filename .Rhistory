test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
# toy data for calculation
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
m <- matrix(
c(1,1,100,100),
nrow = 2,
ncol = 2,
byrow = TRUE)
l <- c(0,0,0,1,1,1)
test_that("test if output is a dataframe given toy data", {
expect_equal(is.data.frame(summary(X = A, medians = m, labels = l)), TRUE)
})
test_that("test if number of clusters is correct", {
expect_equal(nrow(summary(X = A, medians = m, labels = l)), 2)
})
test_that("test if the labels are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,1],0)
expect_equal(summary(X = A, medians = m, labels = l)[2,1],1)
})
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],c(1,1))
expect_equal(summary(X = A, medians = m, labels = l)[2,2],c(100,100))
})
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2] == c(100,100)
summary(X = A, medians = m, labels = l)[2,2] == 100,100
summary(X = A, medians = m, labels = l)[2,2] == list(100,100)
summary(X = A, medians = m, labels = l)[2,2
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2]
class(summary(X = A, medians = m, labels = l)[2,2])
as.character(c(100,100))
class(summary(X = A, medians = m, labels = l)[2,2]) == as.character(c(100,100))
summary(X = A, medians = m, labels = l)[2,2] == as.character(c(100,100))
class(summary(X = A, medians = m, labels = l)[2,2])
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2] == "100,100"
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],"1,1")
expect_equal(summary(X = A, medians = m, labels = l)[2,2],"100,100")
})
test_that("test if the numbers of data points in each cluster are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,3],3)
expect_equal(summary(X = A, medians = m, labels = l)[2,3],3)
})
test_that("test if the average distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,4],2/3)
expect_equal(summary(X = A, medians = m, labels = l)[2,4],2/3)
})
test_that("test if the minimum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,5], 0)
expect_equal(summary(X = A, medians = m, labels = l)[2,5], 0)
})
test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
m <- matrix(
c(1,1,100,100),
nrow = 2,
ncol = 2,
byrow = TRUE)
l <- c(0,0,0,1,1,1)
test_that("test if output is a dataframe given toy data", {
expect_equal(is.data.frame(summary(X = A, medians = m, labels = l)), TRUE)
})
test_that("test if number of clusters is correct", {
expect_equal(nrow(summary(X = A, medians = m, labels = l)), 2)
})
test_that("test if the labels are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,1],0)
expect_equal(summary(X = A, medians = m, labels = l)[2,1],1)
})
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],"1,1")
expect_equal(summary(X = A, medians = m, labels = l)[2,2],"100,100")
})
test_that("test if the numbers of data points in each cluster are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,3],3)
expect_equal(summary(X = A, medians = m, labels = l)[2,3],3)
})
test_that("test if the average distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,4],2/3)
expect_equal(summary(X = A, medians = m, labels = l)[2,4],2/3)
})
test_that("test if the minimum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,5], 0)
expect_equal(summary(X = A, medians = m, labels = l)[2,5], 0)
})
test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
medians <- kmedians(A,n)[[1]]
kmedians <- function(X, num_clusters, n_it=100){
# Groups the points in your dataset ,X, into the desired number of clusters, based on the median distance between the points.
# This function uses random intilization to assign the first medians and then will update the medians and
# the group assignments until the assignment does not change.
#
# Parameters
# ----------
# X: matrix
# The dataset being clustered
#
# num_clusters: integer
# The desired number of clusters
#
# n_it: integer
# The number of loops. Default value is 100.
#
# Returns
# -------
# List contains both medians and labels :
#
#   medians: matrix
#   The coordinates of the medians for each cluster
#
#   labels: list
#   List that has the assignment of the cluster for each point in the dataset
set.seed(123)
n <- nrow(X)
u <- matrix(0, nrow = num_clusters, ncol = n)
# initialize median points
medians <- X[sample(n,size=num_clusters,replace=FALSE),]
for (i in 1:n_it){
K <- nrow(medians)
N <- nrow(X)
dist <- matrix(nrow=N,ncol=K)
for (k in 1:K) {
for (i in 1:n){
dist[i,k] <- abs(X[i,1]-medians[k,1])+abs(X[i,2]-medians[k,2])
}
}
labels <- apply(dist, 1, which.min)
for (j in 1:n){
u[labels[j], j] <- 1
}
for (k in 1:num_clusters){
medians[k,] = apply((matrix(X[u[k,]==1],ncol=2)), 2, median)
}
}
# make the output as a list
return(list(medians,labels))
}
medians <- kmedians(A,n)[[1]]
labels <- kmedians(A,n)[[2]]
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
medians_df <- data.frame(cbind(unique(labels),medians))
medians <- kmedians(A,n)[[1]]
labels <- kmedians(A,n)[[2]]
medians <- kmedians(A,2)[[1]]
labels <- kmedians(A,2)[[2]]
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
medians_df
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
summary(A, medians, labels)
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
#' @import tidyverse
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
summary(A, medians, labels)
#' @import tidyverse
library(tidyverse)
summary(A, medians, labels)
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
medians_df
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df
summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
data.frame(summary_df)
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df <- summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
summary(A, medians, labels)
View(summary_df)
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df <- summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (data.frame(summary_df))
}
summary(A, medians, labels)
B<-summary(A, medians, labels)
View(B)
kable(B)
library(knit)
library(kabel)
library(kableExtra)
kable(B)
B %>% knitr::kable()
B
view(B)
B %>%
knitr::kable() %>%
kableExtra::kable_styling()
summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians))
colnames(medians_df) <- c("label", "medianX", "medianY")
summary_df <- data.frame(cbind(A,labels))
colnames(summary_df) <- c("X","Y","label")
summary_df <- summary_df %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd)
colnames(summary_df) <- c("Cluster Label","Median Coordinates",
"Number of Points in Cluster","Average Distance",
"Minimum Distance","Maximum Distance")
return (summary_df)
}
B<-summary(A, medians, labels)
B %>%
knitr::kable() %>%
kableExtra::kable_styling()
DT::datatable(B)
install.packages("DT")
DT::datatable(B)
huxtable::print_screenB)
huxtable::print_screen(B)
install.packages("huxtable")
huxtable::print_screen(B)
