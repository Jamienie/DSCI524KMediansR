summary <- function(X, medians, labels){
# Generates a table to display the cluster labels, the coordinates of the cluster medians,
# number of points in each cluster, the average distance within the cluster,
# the maximum distance within the cluster and the minimum distance within the cluster.
#
#
# Parameters
# ----------
#
# X: matrix
# The dataset being clustered
#
# medians: matrix
# Coordinates of each cluster median
#
# labels:  list
# Array with the assignment of the cluster for each point in the dataset
#
# Returns
# -------
# dataframe
# Returns a dataframe with 6 columns and number of rows will be the number of clusters. The labels of the columns:
# Cluster labels, Median Coordinates, Number of Points in Cluster, Average Distance, Minimum Distance, Maximum Distance
medians_df <- data.frame(cbind(unique(labels),medians)) %>%
plyr::rename(c(X1 = 'label', X2 = 'medianX', X3 = 'medianY'))
summary_df <- data.frame(cbind(A,labels)) %>%
plyr::rename(c(V1 = 'X', V2 = 'Y', labels = 'label')) %>%
dplyr::right_join(medians_df, by = 'label') %>%
dplyr::mutate(distance = (abs(X-medianX)+abs(Y-medianY))) %>%
dplyr::select(label, medianX, medianY, distance) %>%
dplyr::group_by(label) %>%
dplyr::summarise(medianX = unique(medianX), medianY = unique(medianY), num = n(), avgd = mean(distance), mind = min(distance), maxd = max(distance)) %>%
dplyr::mutate(med = paste(medianX, medianY, sep = ",")) %>%
dplyr::arrange(label) %>%
dplyr::select(label, med, num, avgd, mind, maxd) %>%
plyr::rename(c(label = 'Cluster Label',
med = 'Median Coordinates',
num = 'Number of Points in Cluster',
avgd = 'Average Distance',
mind = 'Minimum Distance',
maxd = 'Maximum Distance'))
return (data.frame(summary_df))
}
test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
# toy data for calculation
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
m <- matrix(
c(1,1,100,100),
nrow = 2,
ncol = 2,
byrow = TRUE)
l <- c(0,0,0,1,1,1)
test_that("test if output is a dataframe given toy data", {
expect_equal(is.data.frame(summary(X = A, medians = m, labels = l)), TRUE)
})
test_that("test if number of clusters is correct", {
expect_equal(nrow(summary(X = A, medians = m, labels = l)), 2)
})
test_that("test if the labels are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,1],0)
expect_equal(summary(X = A, medians = m, labels = l)[2,1],1)
})
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],c(1,1))
expect_equal(summary(X = A, medians = m, labels = l)[2,2],c(100,100))
})
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2] == c(100,100)
summary(X = A, medians = m, labels = l)[2,2] == 100,100
summary(X = A, medians = m, labels = l)[2,2] == list(100,100)
summary(X = A, medians = m, labels = l)[2,2
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2]
class(summary(X = A, medians = m, labels = l)[2,2])
as.character(c(100,100))
class(summary(X = A, medians = m, labels = l)[2,2]) == as.character(c(100,100))
summary(X = A, medians = m, labels = l)[2,2] == as.character(c(100,100))
class(summary(X = A, medians = m, labels = l)[2,2])
summary(X = A, medians = m, labels = l)[2,2]
summary(X = A, medians = m, labels = l)[2,2] == "100,100"
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],"1,1")
expect_equal(summary(X = A, medians = m, labels = l)[2,2],"100,100")
})
test_that("test if the numbers of data points in each cluster are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,3],3)
expect_equal(summary(X = A, medians = m, labels = l)[2,3],3)
})
test_that("test if the average distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,4],2/3)
expect_equal(summary(X = A, medians = m, labels = l)[2,4],2/3)
})
test_that("test if the minimum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,5], 0)
expect_equal(summary(X = A, medians = m, labels = l)[2,5], 0)
})
test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
A <- matrix(
c(1,1,1,2,2,1,100,100,101,100,100,101),
nrow = 6,
ncol = 2,
byrow = TRUE)
m <- matrix(
c(1,1,100,100),
nrow = 2,
ncol = 2,
byrow = TRUE)
l <- c(0,0,0,1,1,1)
test_that("test if output is a dataframe given toy data", {
expect_equal(is.data.frame(summary(X = A, medians = m, labels = l)), TRUE)
})
test_that("test if number of clusters is correct", {
expect_equal(nrow(summary(X = A, medians = m, labels = l)), 2)
})
test_that("test if the labels are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,1],0)
expect_equal(summary(X = A, medians = m, labels = l)[2,1],1)
})
test_that("test if the reported Median Coordinates are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,2],"1,1")
expect_equal(summary(X = A, medians = m, labels = l)[2,2],"100,100")
})
test_that("test if the numbers of data points in each cluster are correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,3],3)
expect_equal(summary(X = A, medians = m, labels = l)[2,3],3)
})
test_that("test if the average distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,4],2/3)
expect_equal(summary(X = A, medians = m, labels = l)[2,4],2/3)
})
test_that("test if the minimum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,5], 0)
expect_equal(summary(X = A, medians = m, labels = l)[2,5], 0)
})
test_that("test if the maximum distance within each cluster is correct", {
expect_equal(summary(X = A, medians = m, labels = l)[1,6], 1)
expect_equal(summary(X = A, medians = m, labels = l)[2,6], 1)
})
